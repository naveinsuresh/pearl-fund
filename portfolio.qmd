---
title: "Portfolio Optimization"
author: "Navein Suresh, Suryaveer Singh"
date: "~"
format: html
editor: visual
---

## Overview

Our objective in this project is to optimize a portfolio of stocks for risk-adjusted returns. We will be focusing on a 5-stock portfolio consisting of the leading semiconductor companies in the market:

1.  *Advanced Micro Device, Inc. (NASDAQ: AMD)*
2.  *Intel Corp. (NASDAQ: INTC)*
3.  *NVIDIA Corp. (NASDAQ: NVDA)*
4.  *Super Micro Computer Inc. (NASDAQ: SMCI)*
5.  *Taiwan Semiconductor Mfg. Co. Ltd. (NYSE: TSM)*

We make use of various financial models, which we go into depth later on while also leverage the tidyquant package on R as our convenient tool for portfolio optimization. Using historical data, we will test our portfolio’s performance and compare it to the performance of two benchmark index funds — S&P 500 and NASDAQ.

Be sure to have to following libraries installed and imported before proceeding:

```{r}
library(tidyquant)
library(dplyr)
library(ggplot2)
library(PerformanceAnalytics)

```

Our testing time period will be from January 1, 2004 to January 1, 2024. This allows us to account for a range of economic situations — most notably the global financial crisis of 2008 and the SARS COVID-19 epidemic of 2020.

We begin with an equally weighted portfolio of the above stocks, each at 20% equity holding. For capital consideration, we will assume we start with \$10,000 (USD). You will also find us retrieving the recent 10-year treasury yields using the tidyquant functions.

```{r}
stock_tickers <- c("AMD", "INTC", "NVDA", "SMCI", "TSM")
weights <- rep(0.2, 5)
initial_investment <- 10000

ten_year_treasury_yield_table = arrange(tq_get("DGS10", get = "economic.data"), desc(date))
latest_ten_year_treasury_yield = slice(ten_year_treasury_yield_table, 1)$price

stock_allocations <- weights * initial_investment

portfolio <- data.frame("Equity" = stock_tickers, "Investment ($)" = stock_allocations)
print(latest_ten_year_treasury_yield)
print(portfolio)

```

Next, we turn to assembling our aggregation for our tech portfolio using historical returns for our specified time ranged mentioned earlier (segmented by monthly returns).

```{r}

stock_returns_monthly_raw <- tq_get(c("AMD", "INTC", "NVDA", "SMCI", "TSM"), get  = "stock.prices", from = "2004-01-01", to   = "2024-01-01")

stock_returns_monthly = stock_returns_monthly_raw %>% group_by(symbol) %>% tq_transmute(select = adjusted, mutate_fun = periodReturn, period = "monthly", col_rename = "MonthlyReturns")

stock_returns_monthly
```

Once we have our monthly historical stock returns for our time frame, we move to our two benchmark index funds, which we use as a comparison for our portfolio performance, *NASDAQ COMPOSITE (NYSE: \^IXIC)* *& SPDR S&P 500 ETF Trust (NYSE: SPY).* We pull the respective historical monthly returns once again for these two benchmarks.

**S&P 500:**

```{r}

sp500_returns_monthly_raw <- tq_get("SPY", get = "stock.prices", from = "2004-01-01", to = "2024-01-01")

sp500_returns_monthly = tq_transmute(sp500_returns_monthly_raw, select = adjusted, mutate_fun = periodReturn, period = "monthly", col_rename = "Monthly Returns")


# sp500_returns_monthly["Monthly Returns"] = sp500_returns_monthly["Monthly Returns"] * 100

colnames(sp500_returns_monthly)[colnames(sp500_returns_monthly) == "Monthly Returns"] = "SPYMonthlyReturns "

sp500_returns_monthly

```

**NASDAQ COMPOSITE:**

```{r}

nasdaq_returns_monthly_raw <- tq_get("^IXIC", get = "stock.prices", from = "2004-01-01", to = "2024-01-01")

nasdaq_returns_monthly = tq_transmute(nasdaq_returns_monthly_raw, select = adjusted, mutate_fun = periodReturn, period = "monthly", col_rename = "Monthly Returns")

# nasdaq_returns_monthly["Monthly Returns"] = nasdaq_returns_monthly["Monthly Returns"] * 100

colnames(nasdaq_returns_monthly)[colnames(nasdaq_returns_monthly) == "Monthly Returns"] = "NASDAQMonthlyReturns"

nasdaq_returns_monthly
```

Portfolio Aggregation for Return

```{r}

portfolio_monthly_returns = stock_returns_monthly %>% tq_portfolio(assets_col = symbol, returns_col = MonthlyReturns, weights = weights, col_rename = "AggregateMonthlyReturns")

# portfolio_monthly_returns["AggregateMonthlyReturns"] = portfolio_monthly_returns["AggregateMonthlyReturns"] * 100

colnames(portfolio_monthly_returns)[colnames(portfolio_monthly_returns) == "AggregateMonthlyReturns"] = "AggregateMonthlyReturns"

portfolio_monthly_returns

```

Now we move on with combining the returns of the the two baseline index funds with the returns of our tech portfolio.

```{r}

table_of_returns = left_join(portfolio_monthly_returns, nasdaq_returns_monthly, by="date")

# table_of_returns = left_join(table_of_returns_A, nasdaq_returns_monthly, by="date")

table_of_returns
```

Computing CAPM statistics & analytics

```{r}

statistics = table_of_returns %>% tq_performance(Ra = AggregateMonthlyReturns, Rb = NASDAQMonthlyReturns
, performance_fun = table.CAPM)

statistics

```
